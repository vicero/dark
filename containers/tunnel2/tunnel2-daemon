#!/usr/bin/env bash

# DOC: what is this for?
#
# We run this as its own k8s deployment (at time of writing, scale=1) and route all
# outgoing traffic through it by setting it as a SOCKS5 proxy in HttpClient (and
# LegacyHttpClient)
#
# It currently restricts direct access to the server (you can't hit the server
# directly; you have to send requests off-pod first, which forces incoming traffic to
# go through nginx), as well as to the GCE instance metadata (http://metadata, as
# observed in the security incident of 2020-04-27; we block this by disallowing
# egress to 169.* in a NetworkPolicy on the tunnel. This was the security incident of
# 2020-04-27.)

set -euox pipefail

# kill all the children on exit
# (otherwise they hang around and keep the docker container running)
trap 'pkill -P $$' EXIT

cat > /etc/ssh/sshd_config <<EOF
ListenAddress localhost
PubkeyAuthentication yes
PasswordAuthentication no
AllowUsers tunnel
EOF

/usr/sbin/sshd

su tunnel <<EOF
# generate a new key
ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

# pre-approve the fingerprint
ssh-keyscan -H localhost >> ~/.ssh/known_hosts
EOF

# -tt because -t fails in local env:
# `Pseudo-terminal will not be allocated because stdin is not a terminal.`,
# and -tt forces allocation of a pseudo-terminal
su tunnel -c "ssh -tt -D *:1080 localhost sleep infinity" &

wait
